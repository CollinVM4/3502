int maxSum(Node * root, char * response)
{
    if (root == NULL) return 0;

    int responseLen = strlen(response);
    int result = 0;


    for (int i = 0; i < responseLen; i++)
    {
        int index = mapCharToIndex(response[i]);
        if (root->children[index] != NULL) 
        {
            result += root->children[index]->myAmount;
            root = root->children[index]; // Move to the next node in the trie
        } 
        else
        {
            return result;
        }
    }
    
    return result;
}




Node * addFamily(Node * root, char * response, int amount)
{
    // create root if no root exists
    if (root == NULL)
    {
        root = createNode();
    }

    // increment subTrieAmount for every node in the path
    root->subTrieAmount += amount;

    // string is not empty
    if (response[0] != '\0')
    {
        int index = mapCharToIndex(response[0]); // get index
        root->children[index] = addFamily(root->children[index], response + 1, amount); // add list of children
    }

    // if the response ends at this node, increment myAmount
    if (response[0] == '\0' || response[1] == '\0')
    {
        root->myAmount += amount;
    }

    return root;
}