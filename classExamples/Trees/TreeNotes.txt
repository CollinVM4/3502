
Graph is a math model of data

Two main parts
    1. Vertex set - (items, nodes)
    2. Edge set - (how the items relate to eachother)

    picture a graph...
        vertex set - {A, B, C, D}
        edge set = {(A,B), (C,D), (A,D)}

        A---B
          \
            \
        C----D

Tree
    - acyclic (without cycle) and connected 

    rooted tree 
        - all edges point away from a special root node
    
    parent-child
        * root has no parent                                o <- parent
        * every non-root node has exactly 1 parent         / \
                                                          o   o <- child

            arrayList model

                struct Node 
                {
                    Node * parent;
                    int size, cap;
                    Node ** children; 
                }

Binary Tree
    - rooted tree where each Node has atmost 2 children (2, 1, or 0)
    - nodes with 0 children are called leaves

Traversals 
    - how you explore a tree
        all nodes are roots of their own tree


        1. inorder traversal -binary trees only
        2. pre-order    \
                         - N-ary and binary
        3. post-order   /
    
    tree deletion:

        (post-order)
        delete(Node * root)

            delete all children recursively 
                then -> free(root)
        
        (pre-order)
            process root first



Binary Search Trees 
    - in a general rooted tree, how would you find a node with a specific value?
       you could... linear search through pre-order
    - use the root to eliminate nodes from search space 
        the tree needs to be structured such that, nodes will not be improperly removed
    - because of the comparison used on the root, elements smaller than the root are to one side, 
        and elements greater than are on the other.

            best  - Θ(1)
            avg   - Θ(log(n))
            worst - Θ(n)

    have these functions...
        - containment check (search)
        - insert -- b Θ(n), a Θlog(n), w Θ(n)
        - remove (find predecessor/ sucessor to replace...
                    DO NOT slide children up)


Balanced BST's

    - use "tree rotation"
    - change topology of tree
    - maintain inorder traversal 

    if inorder traversal, tree is a BST 

    2 rotations
        - left
        - right 

    to have rotations correctly 
        use updated node structur

        struct Node
        {
            data
            Node * left, * right, * parent
        }

    "heaviness"
        - depth of a node 
            distance from the root to a node 
        - height of a node
            depth of deepest leaft - depth of self


    Pre-order  - Node, Left, Right
    Post-order - Left, Right, Node
    In-order   - Left, Node, Right




    AVL Trees

        - height is used to balance AVL
        - Balance factor is the difference of heights btw/ 2 children
                (left - right)
        - Only 3 balance factors, [ -1, 0, 1 ]
        - Look for imbalances from bottom to top
        - 4 Imbalance cases
            - imbalanced Node BF = 2


        AVL insertion

            current = inserted Node 
            while(current != NULL)
            {
                if (current is imbalanced)
                {
                    rebalance(current);
                    break;
                }
            current = parentOf(current)
            }

        AVL deletion

            current = spo of Node removed
            while(current != NULL)
            {
               if (imbalanced(current))
               {
                    rebalance(current);
               } 
            }
            current = parentOf(current);